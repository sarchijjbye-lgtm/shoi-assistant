import os
TOKEN = os.getenv("TOKEN")
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import os
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "SHOI Assistant is alive üíß"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set. Please add your Telegram bot token from BotFather.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞")]
    ])
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üíß\n–Ø SHOI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Å–ª–æ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç–∂–∏–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞¬ª.",
        reply_markup=kb
    )

@dp.message(lambda m: m.text in ["–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞", "üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ"])
async def question_1(message: types.Message):
    user_data[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ò–º–º—É–Ω–∏—Ç–µ—Ç –∏ –∑–∞—â–∏—Ç–∞")],
        [KeyboardButton(text="–ñ–ö–¢ –∏ –ø–µ—á–µ–Ω—å")],
        [KeyboardButton(text="–ö–æ–∂–∞ –∏ –≤–æ–ª–æ—Å—ã")],
        [KeyboardButton(text="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –º–æ–∑–≥")],
        [KeyboardButton(text="–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")],
        [KeyboardButton(text="–°–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã")],
        [KeyboardButton(text="–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")]
    ])
    await message.answer("1Ô∏è‚É£ –ß—Ç–æ –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?", reply_markup=kb)

@dp.message(lambda m: m.text in [
    "–ò–º–º—É–Ω–∏—Ç–µ—Ç –∏ –∑–∞—â–∏—Ç–∞", "–ñ–ö–¢ –∏ –ø–µ—á–µ–Ω—å", "–ö–æ–∂–∞ –∏ –≤–æ–ª–æ—Å—ã",
    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –º–æ–∑–≥", "–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–°–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã", "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"
])
async def question_2(message: types.Message):
    user_data[message.from_user.id]["q1"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ß–∞—Å—Ç–æ —É—Å—Ç–∞—é")],
        [KeyboardButton(text="–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º")],
        [KeyboardButton(text="–°—É—Ö–∞—è –∫–æ–∂–∞")],
        [KeyboardButton(text="–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å")],
        [KeyboardButton(text="–ß–∞—Å—Ç–æ –±–æ–ª–µ—é")],
        [KeyboardButton(text="–•–æ—á—É –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏")]
    ])
    await message.answer("2Ô∏è‚É£ –ß—Ç–æ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?", reply_markup=kb)

@dp.message(lambda m: m.text in [
    "–ß–∞—Å—Ç–æ —É—Å—Ç–∞—é", "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º", "–°—É—Ö–∞—è –∫–æ–∂–∞",
    "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å", "–ß–∞—Å—Ç–æ –±–æ–ª–µ—é", "–•–æ—á—É –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏"
])
async def question_3(message: types.Message):
    user_data[message.from_user.id]["q2"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞")],
        [KeyboardButton(text="–û–≤–æ—â–∏ –∏ –∫—Ä—É–ø—ã")],
        [KeyboardButton(text="–§–∞—Å—Ç—Ñ—É–¥ –∏ —Å–ª–∞–¥–∫–æ–µ")],
        [KeyboardButton(text="–ü–æ—á—Ç–∏ –Ω–µ –µ–º –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")]
    ])
    await message.answer("3Ô∏è‚É£ –ö–∞–∫ –≤—ã –ø–∏—Ç–∞–µ—Ç–µ—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ?", reply_markup=kb)

@dp.message(lambda m: m.text in [
    "–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞", "–û–≤–æ—â–∏ –∏ –∫—Ä—É–ø—ã", "–§–∞—Å—Ç—Ñ—É–¥ –∏ —Å–ª–∞–¥–∫–æ–µ", "–ü–æ—á—Ç–∏ –Ω–µ –µ–º –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
])
async def question_4(message: types.Message):
    user_data[message.from_user.id]["q3"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")],
        [KeyboardButton(text="–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞")],
        [KeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å")],
        [KeyboardButton(text="–°–ø–æ–∫–æ–π–Ω—ã–π —Ä–∏—Ç–º")]
    ])
    await message.answer("4Ô∏è‚É£ –ö–∞–∫–æ–π —É –≤–∞—Å –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?", reply_markup=kb)

@dp.message(lambda m: m.text in [
    "–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å", "–°–ø–æ–∫–æ–π–Ω—ã–π —Ä–∏—Ç–º"
])
async def question_5(message: types.Message):
    user_data[message.from_user.id]["q4"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–û—Ä–µ—Ö–æ–≤—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–ü—Ä—è–Ω—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–Ω—É—Ç—Ä—å –∏ –¥–ª—è —É—Ö–æ–¥–∞")]
    ])
    await message.answer("5Ô∏è‚É£ –ß—Ç–æ –≤–∞–º –≤–∞–∂–Ω–µ–µ –≤ –≤–∫—É—Å–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å–ª–∞?", reply_markup=kb)

@dp.message(lambda m: m.text in [
    "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∫—É—Å", "–û—Ä–µ—Ö–æ–≤—ã–π –≤–∫—É—Å", "–ü—Ä—è–Ω—ã–π –≤–∫—É—Å", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–Ω—É—Ç—Ä—å –∏ –¥–ª—è —É—Ö–æ–¥–∞"
])
async def show_result(message: types.Message):
    user_data[message.from_user.id]["q5"] = message.text
    answers = " ".join(user_data[message.from_user.id].values()).lower()

    oils = {
        "flax": {
            "name": "üíß –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ SHOI",
            "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, —Å–æ—Å—É–¥—ã –∏ –º–æ–∑–≥. –ò—Å—Ç–æ—á–Ω–∏–∫ –û–º–µ–≥–∞-3 –∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤.",
            "how": "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ø–æ 1 —á.–ª. —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ —Å–∞–ª–∞—Ç—ã."
        },
        "hemp": {
            "name": "üåø –ö–æ–Ω–æ–ø–ª—è–Ω–æ–µ –º–∞—Å–ª–æ SHOI",
            "why": "–ë–∞–ª–∞–Ω—Å –û–º–µ–≥–∞-3 –∏ –û–º–µ–≥–∞-6, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ, —Ç—Ä–µ–≤–æ–≥–µ –∏ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è—Ö.",
            "how": "1 —á.–ª. —É—Ç—Ä–æ–º, –∫—É—Ä—Å–æ–º 1‚Äì2 –º–µ—Å—è—Ü–∞."
        },
        "pumpkin": {
            "name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–æ–µ –º–∞—Å–ª–æ SHOI",
            "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—á–µ–Ω—å, –ñ–ö–¢ –∏ –º—É–∂—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –±–æ–≥–∞—Ç–æ —Ü–∏–Ω–∫–æ–º –∏ –º–∞–≥–Ω–∏–µ–º.",
            "how": "1 —á.–ª. 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –¥–æ –µ–¥—ã."
        },
        "blackseed": {
            "name": "üåë –ú–∞—Å–ª–æ —á—ë—Ä–Ω–æ–≥–æ —Ç–º–∏–Ω–∞ SHOI",
            "why": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç, —Å–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –ø—Ä–æ—Å—Ç—É–¥–∞—Ö –∏ –∞–ª–ª–µ—Ä–≥–∏–∏.",
            "how": "0.5‚Äì1 —á.–ª. –ø–æ—Å–ª–µ –µ–¥—ã, –∫—É—Ä—Å–æ–º 30 –¥–Ω–µ–π."
        },
        "coconut": {
            "name": "ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ SHOI",
            "why": "–ò—Å—Ç–æ—á–Ω–∏–∫ –±—ã—Å—Ç—Ä–æ–π —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å.",
            "how": "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–∞—à—É, –∫–æ—Ñ–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Ä—É–∂–Ω–æ."
        },
        "sunflower": {
            "name": "üåª –ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –º–∞—Å–ª–æ SHOI",
            "why": "–ë–æ–≥–∞—Ç–æ –≤–∏—Ç–∞–º–∏–Ω–æ–º E, —É–ª—É—á—à–∞–µ—Ç –∫–æ–∂—É –∏ –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤.",
            "how": "1 —á.–ª. –≤ –¥–µ–Ω—å –≤ —Å–æ—Å—Ç–∞–≤–µ —Å–∞–ª–∞—Ç–æ–≤."
        },
        "walnut": {
            "name": "üå∞ –ú–∞—Å–ª–æ –≥—Ä–µ—Ü–∫–æ–≥–æ –æ—Ä–µ—Ö–∞ SHOI",
            "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é, –ø–∞–º—è—Ç—å –∏ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–¥—Ü–∞.",
            "how": "1 —á.–ª. —É—Ç—Ä–æ–º –ø–µ—Ä–µ–¥ –µ–¥–æ–π."
        }
    }
    
    score = {k: 0 for k in oils.keys()}

    if "–∏–º–º—É–Ω" in answers:
        score["blackseed"] += 3
    if "–∂–∫—Ç" in answers or "–ø–µ—á–µ–Ω" in answers or "–ø–∏—â–µ–≤–∞—Ä–µ–Ω" in answers:
        score["pumpkin"] += 3
    if "–∫–æ–∂–∞" in answers or "–≤–æ–ª–æ—Å" in answers or "—Å—É—Ö–∞—è" in answers:
        score["sunflower"] += 3
        score["coconut"] += 1
    if "—Å—Ç—Ä–µ—Å—Å" in answers or "—Ç—Ä–µ–≤–æ–∂" in answers:
        score["hemp"] += 3
    if "–º–æ–∑–≥" in answers or "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞" in answers:
        score["walnut"] += 3
    if "—Å–µ—Ä–¥—Ü–µ" in answers or "—Å–æ—Å—É–¥" in answers:
        score["flax"] += 3
    if "—ç–Ω–µ—Ä–≥" in answers or "–∞–∫—Ç–∏–≤" in answers:
        score["coconut"] += 3
    if "–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω" in answers:
        score["pumpkin"] += 2
        score["hemp"] += 2
    if "—É—Å—Ç–∞—é" in answers or "—É—Å—Ç–∞–ª—å" in answers:
        score["coconut"] += 2
        score["walnut"] += 1
    if "–±–æ–ª–µ—é" in answers:
        score["blackseed"] += 3
    if "—Å–∏–¥—è—á" in answers:
        score["flax"] += 2
        score["walnut"] += 1
    if "—Å–ø–æ–∫–æ–π–Ω" in answers:
        score["sunflower"] += 1
        score["walnut"] += 1
    if "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω" in answers:
        score["sunflower"] += 1
        score["coconut"] += 1
    if "–æ—Ä–µ—Ö–æ–≤" in answers:
        score["walnut"] += 2
    if "–ø—Ä—è–Ω—ã–π" in answers:
        score["blackseed"] += 1
        score["pumpkin"] += 1
    if "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω" in answers:
        score["coconut"] += 2
    if "–º—è—Å–æ" in answers or "—Ä—ã–±–∞" in answers:
        score["flax"] += 1
    if "–æ–≤–æ—â–∏" in answers or "–∫—Ä—É–ø—ã" in answers:
        score["sunflower"] += 1
    if "—Ñ–∞—Å—Ç—Ñ—É–¥" in answers or "—Å–ª–∞–¥–∫–æ–µ" in answers:
        score["pumpkin"] += 2
        score["hemp"] += 1
    if "–ø–æ—á—Ç–∏ –Ω–µ –µ–º" in answers or "–∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" in answers:
        score["flax"] += 2
        score["walnut"] += 1

    best = max(score, key=lambda k: score[k])
    rec = oils[best]

    restart_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ")]
    ])
    
    await message.answer(
        f"‚ú® –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –º–∞—Å–ª–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å!\n\n"
        f"<b>{rec['name']}</b>\n\n"
        f"üîπ –ü–æ—á–µ–º—É –æ–Ω–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç: {rec['why']}\n"
        f"üí° –ö–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: {rec['how']}\n\n"
        f"üìä 9 –∏–∑ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤ SHOI –æ—Ç–º–µ—á–∞—é—Ç —É–ª—É—á—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è —É–∂–µ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.\n\n"
        f"üí¨ –•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?\n"
        f"<a href='https://wa.me/message/3NNTHAAA6GFMH1'>–ù–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp ‚Äî –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</a>\n\n"
        f"üí° <i>–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–∞—Å–ª–æ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=restart_kb
    )

async def main():
    print("ü§ñ SHOI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
