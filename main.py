import os
import asyncio
import threading
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = "https://shoi-assistant.onrender.com"  # URL Render
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# –ì–ª–∞–≤–Ω—ã–π event loop –¥–ª—è aiogram
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

user_data = {}

@app.route("/")
def home():
    return "üíß SHOI Assistant is alive and running."

@app.route(WEBHOOK_PATH, methods=["POST"])
def receive_update():
    """
    Flask –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç endpoint –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∞–ø–¥–µ–π—Ç–µ Telegram.
    –ú—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º update –≤ event loop aiogram.
    """
    update = types.Update(**request.json)
    asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)
    return {"ok": True}


# === –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞")]])
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üíß\n–Ø SHOI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Å–ª–æ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ç–∂–∏–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞¬ª.",
        reply_markup=kb
    )


@dp.message(lambda m: m.text in ["–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞", "üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ"])
async def question_1(message: types.Message):
    user_data[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ò–º–º—É–Ω–∏—Ç–µ—Ç –∏ –∑–∞—â–∏—Ç–∞")],
        [KeyboardButton(text="–ñ–ö–¢ –∏ –ø–µ—á–µ–Ω—å")],
        [KeyboardButton(text="–ö–æ–∂–∞ –∏ –≤–æ–ª–æ—Å—ã")],
        [KeyboardButton(text="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –º–æ–∑–≥")],
        [KeyboardButton(text="–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")],
        [KeyboardButton(text="–°–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã")],
        [KeyboardButton(text="–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")]
    ])
    await message.answer("1Ô∏è‚É£ –ß—Ç–æ –¥–ª—è –≤–∞—Å —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?", reply_markup=kb)


@dp.message(lambda m: m.text in [
    "–ò–º–º—É–Ω–∏—Ç–µ—Ç –∏ –∑–∞—â–∏—Ç–∞", "–ñ–ö–¢ –∏ –ø–µ—á–µ–Ω—å", "–ö–æ–∂–∞ –∏ –≤–æ–ª–æ—Å—ã",
    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –º–æ–∑–≥", "–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–°–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã", "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"
])
async def question_2(message: types.Message):
    user_data[message.from_user.id]["q1"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ß–∞—Å—Ç–æ —É—Å—Ç–∞—é")],
        [KeyboardButton(text="–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º")],
        [KeyboardButton(text="–°—É—Ö–∞—è –∫–æ–∂–∞")],
        [KeyboardButton(text="–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å")],
        [KeyboardButton(text="–ß–∞—Å—Ç–æ –±–æ–ª–µ—é")],
        [KeyboardButton(text="–•–æ—á—É –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏")]
    ])
    await message.answer("2Ô∏è‚É£ –ß—Ç–æ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?", reply_markup=kb)


@dp.message(lambda m: m.text in [
    "–ß–∞—Å—Ç–æ —É—Å—Ç–∞—é", "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º", "–°—É—Ö–∞—è –∫–æ–∂–∞",
    "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å", "–ß–∞—Å—Ç–æ –±–æ–ª–µ—é", "–•–æ—á—É –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏"
])
async def question_3(message: types.Message):
    user_data[message.from_user.id]["q2"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞")],
        [KeyboardButton(text="–û–≤–æ—â–∏ –∏ –∫—Ä—É–ø—ã")],
        [KeyboardButton(text="–§–∞—Å—Ç—Ñ—É–¥ –∏ —Å–ª–∞–¥–∫–æ–µ")],
        [KeyboardButton(text="–ü–æ—á—Ç–∏ –Ω–µ –µ–º –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")]
    ])
    await message.answer("3Ô∏è‚É£ –ö–∞–∫ –≤—ã –ø–∏—Ç–∞–µ—Ç–µ—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ?", reply_markup=kb)


@dp.message(lambda m: m.text in [
    "–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞", "–û–≤–æ—â–∏ –∏ –∫—Ä—É–ø—ã", "–§–∞—Å—Ç—Ñ—É–¥ –∏ —Å–ª–∞–¥–∫–æ–µ", "–ü–æ—á—Ç–∏ –Ω–µ –µ–º –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
])
async def question_4(message: types.Message):
    user_data[message.from_user.id]["q3"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏")],
        [KeyboardButton(text="–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞")],
        [KeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å")],
        [KeyboardButton(text="–°–ø–æ–∫–æ–π–Ω—ã–π —Ä–∏—Ç–º")]
    ])
    await message.answer("4Ô∏è‚É£ –ö–∞–∫–æ–π —É –≤–∞—Å –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?", reply_markup=kb)


@dp.message(lambda m: m.text in [
    "–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å", "–°–ø–æ–∫–æ–π–Ω—ã–π —Ä–∏—Ç–º"
])
async def question_5(message: types.Message):
    user_data[message.from_user.id]["q4"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–û—Ä–µ—Ö–æ–≤—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–ü—Ä—è–Ω—ã–π –≤–∫—É—Å")],
        [KeyboardButton(text="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–Ω—É—Ç—Ä—å –∏ –¥–ª—è —É—Ö–æ–¥–∞")]
    ])
    await message.answer("5Ô∏è‚É£ –ß—Ç–æ –≤–∞–º –≤–∞–∂–Ω–µ–µ –≤ –≤–∫—É—Å–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å–ª–∞?", reply_markup=kb)


@dp.message(lambda m: m.text in [
    "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∫—É—Å", "–û—Ä–µ—Ö–æ–≤—ã–π –≤–∫—É—Å", "–ü—Ä—è–Ω—ã–π –≤–∫—É—Å", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤–Ω—É—Ç—Ä—å –∏ –¥–ª—è —É—Ö–æ–¥–∞"
])
async def show_result(message: types.Message):
    user_data[message.from_user.id]["q5"] = message.text
    answers = " ".join(user_data[message.from_user.id].values()).lower()

    oils = {
        "flax": {"name": "üíß –õ—å–Ω—è–Ω–æ–µ –º–∞—Å–ª–æ SHOI", "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ, —Å–æ—Å—É–¥—ã –∏ –º–æ–∑–≥. –ò—Å—Ç–æ—á–Ω–∏–∫ –û–º–µ–≥–∞-3.", "how": "1 —á.–ª. —É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫."},
        "hemp": {"name": "üåø –ö–æ–Ω–æ–ø–ª—è–Ω–æ–µ –º–∞—Å–ª–æ SHOI", "why": "–ë–∞–ª–∞–Ω—Å –û–º–µ–≥–∞-3 –∏ –û–º–µ–≥–∞-6, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ.", "how": "1 —á.–ª. —É—Ç—Ä–æ–º –∫—É—Ä—Å–æ–º 1‚Äì2 –º–µ—Å—è—Ü–∞."},
        "pumpkin": {"name": "üéÉ –¢—ã–∫–≤–µ–Ω–Ω–æ–µ –º–∞—Å–ª–æ SHOI", "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—á–µ–Ω—å –∏ –ñ–ö–¢, –±–æ–≥–∞—Ç–æ —Ü–∏–Ω–∫–æ–º.", "how": "1 —á.–ª. 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –¥–æ –µ–¥—ã."},
        "blackseed": {"name": "üåë –ú–∞—Å–ª–æ —á—ë—Ä–Ω–æ–≥–æ —Ç–º–∏–Ω–∞ SHOI", "why": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç, —Å–Ω–∏–∂–∞–µ—Ç –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è.", "how": "0.5‚Äì1 —á.–ª. –ø–æ—Å–ª–µ –µ–¥—ã –∫—É—Ä—Å–æ–º 30 –¥–Ω–µ–π."},
        "coconut": {"name": "ü•• –ö–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ SHOI", "why": "–ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–∞–µ—Ç –∫–æ–∂—É –∏ –≤–æ–ª–æ—Å—ã.", "how": "–î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–∞—à—É –∏–ª–∏ –∫–æ—Ñ–µ, –º–æ–∂–Ω–æ –Ω–∞—Ä—É–∂–Ω–æ."},
        "sunflower": {"name": "üåª –ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –º–∞—Å–ª–æ SHOI", "why": "–ë–æ–≥–∞—Ç–æ –≤–∏—Ç–∞–º–∏–Ω–æ–º E, —É–ª—É—á—à–∞–µ—Ç –∫–æ–∂—É.", "how": "1 —á.–ª. –≤ –¥–µ–Ω—å –≤ —Å–æ—Å—Ç–∞–≤–µ —Å–∞–ª–∞—Ç–æ–≤."},
        "walnut": {"name": "üå∞ –ú–∞—Å–ª–æ –≥—Ä–µ—Ü–∫–æ–≥–æ –æ—Ä–µ—Ö–∞ SHOI", "why": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–º—è—Ç—å.", "how": "1 —á.–ª. —É—Ç—Ä–æ–º –ø–µ—Ä–µ–¥ –µ–¥–æ–π."}
    }

    score = {k: 0 for k in oils.keys()}
    if "–∏–º–º—É–Ω" in answers: score["blackseed"] += 3
    if "–∂–∫—Ç" in answers or "–ø–µ—á–µ–Ω" in answers: score["pumpkin"] += 3
    if "–∫–æ–∂–∞" in answers: score["sunflower"] += 3
    if "—Å—Ç—Ä–µ—Å—Å" in answers: score["hemp"] += 3
    if "–º–æ–∑–≥" in answers: score["walnut"] += 3
    if "—Å–µ—Ä–¥—Ü–µ" in answers: score["flax"] += 3
    if "—ç–Ω–µ—Ä–≥" in answers: score["coconut"] += 3

    best = max(score, key=lambda k: score[k])
    rec = oils[best]
    restart_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ")]])

    await message.answer(
        f"‚ú® –ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –º–∞—Å–ª–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å!\n\n"
        f"<b>{rec['name']}</b>\n\n"
        f"üîπ –ü–æ—á–µ–º—É –æ–Ω–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç: {rec['why']}\n"
        f"üí° –ö–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å: {rec['how']}\n\n"
        f"<a href='https://wa.me/message/3NNTHAAA6GFMH1'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp –¥–ª—è –∑–∞–∫–∞–∑–∞</a>",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=restart_kb
    )


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ===
async def on_startup():
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    print("üíß SHOI Assistant webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def start_bot():
    loop.run_until_complete(on_startup())
    loop.run_forever()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=start_bot, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    app.run(host="0.0.0.0", port=8080)
